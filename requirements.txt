# Core ML/Deep Learning dependencies (CUDA-enabled)
# NOTE: Using PyTorch nightly for Python 3.13 support
torch>=2.0.0  # PyTorch with CUDA support (nightly: 2.10.0+)
torchaudio>=2.0.0  # Audio processing extensions for PyTorch
torchvision>=0.15.0  # Vision utilities (for potential visual features)

# TensorRT for optimized inference (optional but recommended)
# Note: Install tensorrt separately with: pip install tensorrt~=8.6.0 --index-url https://pypi.nvidia.com
# tensorrt>=8.6.0,<9.0.0  # Uncomment if NVIDIA index is configured

# ONNX for model conversion
onnx>=1.14.0
onnxruntime>=1.16.0  # ONNX runtime (use onnxruntime-gpu for GPU support)

# Core dependencies with relaxed version constraints
numpy>=1.24  # Relaxed for Python 3.13 compatibility
librosa>=0.10,<0.11
soundfile>=0.12,<0.13
scipy>=1.10,<1.13
matplotlib>=3.7,<3.10

# Web framework dependencies
flask>=2.3,<3.0
flask-socketio>=5.3,<6.0
flask-cors>=4.0,<5.0
python-socketio>=5.10,<6.0

# Configuration and utilities
pyyaml>=6.0,<7.0
psutil>=5.9,<6.0
pynvml>=11.5,<12.0
websockets>=12.0,<13.0
aiohttp>=3.9,<4.0

# Audio processing and ML utilities
webrtcvad>=2.0,<3.0  # Voice activity detection
crepe>=0.0.12  # Pitch detection (CPU fallback)
torchcrepe>=0.0.23,<0.1  # PyTorch-based CREPE for GPU-accelerated pitch detection; tested with torch 2.0/2.1 and torchcrepe 0.0.23â€“0.0.25; relax upper bound if needed in the future
praat-parselmouth>=0.4.0  # Advanced audio analysis
pyrubberband>=0.3.0  # Pitch-preserving time stretch for singing voice augmentation
resemblyzer>=0.1.1  # Pre-trained speaker encoder for voice cloning (Apache-2.0 license)
noisereduce>=3.0.0  # Noise reduction
demucs>=4.0.0,<5.0.0  # State-of-the-art music source separation (Meta/Facebook)

# Objective quality evaluation metrics
pystoi>=0.3.3  # Short-Time Objective Intelligibility measure
pesq>=0.0.4  # Perceptual Evaluation of Speech Quality
seaborn>=0.12,<0.13  # Statistical data visualization (for quality plots)
pyloudnorm>=0.1.0  # LUFS loudness normalization (ITU-R BS.1770-4)

# ===========================================================================================
# OPTIONAL: Spleeter Backend (NOT REQUIRED - Demucs is the primary backend)
# ===========================================================================================
# Spleeter: Fast music separation fallback (Deezer)
# NOTE: Spleeter and TensorFlow are OPTIONAL dependencies for an alternative separation backend.
#       The primary backend is Demucs (installed above). Only install if you need Spleeter.
#
# Installation:
#   pip install spleeter>=2.4.0,<3.0.0 tensorflow-cpu~=2.12.0  # CPU-only
#   pip install spleeter>=2.4.0,<3.0.0 tensorflow~=2.12.0      # GPU (requires matching CUDA/cuDNN)
#
# WARNING: TensorFlow adds ~500MB+ to install size and may conflict with PyTorch CUDA versions
# TensorFlow compatibility: 2.5.x - 2.13.x (2.14+ may have breaking changes)
# TensorFlow GPU support requires compatible CUDA/cuDNN - see TensorFlow docs for version matrix
#
# Uncomment the lines below ONLY if you want to use Spleeter as a fallback backend:
# spleeter>=2.4.0,<3.0.0
# tensorflow-cpu>=2.12.0,<2.14.0  # Use tensorflow-cpu for CPU-only (recommended to avoid conflicts)
# ===========================================================================================

# Development and testing
pytest>=7.4,<8.0
pytest-cov>=4.1,<5.0
black>=23.7,<24.0
isort>=5.12,<6.0

# GPU monitoring and profiling
nvitop>=1.3,<2.0
py3nvml>=0.2.0  # Alternative NVIDIA management library

# Build dependencies
ninja>=1.11.0
pybind11>=2.11.0
