name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
  repository_dispatch:
    types: [deploy-staging, deploy-production]

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || github.event.client_payload.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || github.event.client_payload.environment }}
      url: ${{ steps.deploy.outputs.app_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment variables
        id: vars
        run: |
          ENV="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          TAG="${{ github.event.inputs.image_tag || github.event.client_payload.image_tag || 'latest' }}"

          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "image_tag=${TAG}" >> $GITHUB_OUTPUT

          if [ "$ENV" = "production" ]; then
            echo "deploy_host=${{ secrets.PROD_HOST }}" >> $GITHUB_OUTPUT
            echo "deploy_user=${{ secrets.PROD_USER }}" >> $GITHUB_OUTPUT
            echo "app_url=https://autovoice.example.com" >> $GITHUB_OUTPUT
          else
            echo "deploy_host=${{ secrets.STAGING_HOST }}" >> $GITHUB_OUTPUT
            echo "deploy_user=${{ secrets.STAGING_USER }}" >> $GITHUB_OUTPUT
            echo "app_url=https://staging.autovoice.example.com" >> $GITHUB_OUTPUT
          fi

      - name: Verify image exists
        run: |
          echo "Verifying image: autovoice/autovoice:${{ steps.vars.outputs.image_tag }}"
          # Add actual verification logic here (docker manifest inspect, etc.)

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ steps.vars.outputs.deploy_host }} >> ~/.ssh/known_hosts

      - name: Deploy with Docker Compose
        id: deploy
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.vars.outputs.deploy_user }}@${{ steps.vars.outputs.deploy_host }} << 'EOF'
            set -e

            # Navigate to deployment directory
            cd /opt/autovoice

            # Backup current configuration
            cp docker-compose.yml docker-compose.yml.backup.$(date +%s)

            # Pull latest changes
            git pull origin main

            # Pull new Docker image
            docker pull autovoice/autovoice:${{ steps.vars.outputs.image_tag }}

            # Update docker-compose with new image tag
            sed -i 's|image:.*|image: autovoice/autovoice:${{ steps.vars.outputs.image_tag }}|' docker-compose.yml

            # Deploy with rolling update
            docker-compose up -d --no-deps --build auto-voice-app

            echo "Deployment initiated"
          EOF

      - name: Wait for health check
        run: |
          echo "Waiting for service to be ready..."
          for i in {1..30}; do
            if curl -f -s ${{ steps.vars.outputs.app_url }}/health > /dev/null; then
              echo "Service is healthy!"
              exit 0
            fi
            echo "Attempt $i: Service not ready yet, waiting..."
            sleep 10
          done
          echo "Service failed to become healthy"
          exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.vars.outputs.app_url }}"
          # Add smoke test commands here
          curl -f ${{ steps.vars.outputs.app_url }}/health
          curl -f ${{ steps.vars.outputs.app_url }}/api/health

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.vars.outputs.deploy_user }}@${{ steps.vars.outputs.deploy_host }} << 'EOF'
            cd /opt/autovoice
            echo "Rolling back to previous version..."
            docker-compose down
            cp docker-compose.yml.backup.* docker-compose.yml
            docker-compose up -d
          EOF

      - name: Create deployment record
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ steps.vars.outputs.environment }}',
              auto_merge: false,
              required_contexts: [],
              payload: {
                image_tag: '${{ steps.vars.outputs.image_tag }}'
              }
            });

      - name: Notify deployment status
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ENV="${{ steps.vars.outputs.environment }}"
          TAG="${{ steps.vars.outputs.image_tag }}"

          echo "Deployment to ${ENV} ${STATUS}: ${TAG}"
          # Add notification logic (Slack, Discord, etc.)
