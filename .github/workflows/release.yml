name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel
          pip install -r requirements.txt

      - name: Build Python package
        run: |
          python -m build
          python setup.py bdist_wheel

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cd ..

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          artifact-name: sbom.spdx.json
          output-file: ./sbom.spdx.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/*
            sbom.spdx.json

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${VERSION})
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..${VERSION})
          fi

          cat > release_notes.md << EOF
          # AutoVoice ${VERSION}

          ## What's Changed

          ${COMMITS}

          ## Installation

          ### Docker
          \`\`\`bash
          docker pull autovoice/autovoice:${VERSION}
          \`\`\`

          ### PyPI
          \`\`\`bash
          pip install auto-voice==${VERSION#v}
          \`\`\`

          ## Upgrade Instructions

          1. Pull the new Docker image or upgrade the Python package
          2. Review configuration changes in CHANGELOG.md
          3. Restart the service

          ## Full Changelog

          See [CHANGELOG.md](CHANGELOG.md) for complete details.
          EOF

          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          files: |
            artifacts/dist/*
            artifacts/sbom.spdx.json
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: artifacts/dist/

  publish-docker:
    name: Publish Docker Images
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            autovoice/autovoice:${{ steps.version.outputs.version }}
            autovoice/autovoice:latest
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
